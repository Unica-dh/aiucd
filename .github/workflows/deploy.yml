name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permette deploy manuale

jobs:
  deploy:
    name: Deploy WordPress to Production
    runs-on: self-hosted  # Usa runner sul server di produzione
    
    steps:
      - name: 🧹 Pre-checkout Cleanup
        run: |
          echo "Fixing permissions for Git checkout..."
          # Stop containers first to release file locks
          docker compose down 2>/dev/null || true
          
          # Fix permissions on wordpress directory using Docker (no sudo needed)
          if [ -d wordpress ]; then
            echo "Fixing wordpress/ permissions..."
            docker run --rm -v "$(pwd)/wordpress:/workspace" alpine:latest \
              sh -c "chmod -R 755 /workspace" 2>/dev/null || true
          fi
          
          # Remove only Git metadata that might conflict
          rm -rf .git/index.lock 2>/dev/null || true
          
          echo "✅ Permissions fixed, ready for checkout"
      
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false  # Don't delete untracked files (WordPress runtime files)
      
      - name: 🔍 Diagnostic - Analyze Permissions
        run: |
          echo "=== PERMISSION DIAGNOSTIC ==="
          echo ""
          echo "1. Current user and groups:"
          whoami
          id
          echo ""
          echo "2. WordPress directory ownership (top 20 files):"
          ls -lah wordpress/ | head -n 20 || echo "wordpress/ not found"
          echo ""
          echo "3. Docker container www-data UID/GID (if running):"
          docker compose exec -T wordpress id www-data 2>/dev/null || echo "Container not running"
          echo ""
          echo "4. wp-config.php ownership:"
          ls -lah wordpress/wp-config.php 2>/dev/null || echo "wp-config.php not found"
          echo ""
          echo "5. Current directory:"
          pwd
          ls -lah
          echo ""
          echo "=== END DIAGNOSTIC ==="
      
      - name: 📋 Display deployment info
        run: |
          echo "🚀 Deploying to Production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Message: ${{ github.event.head_commit.message }}"
      
      - name: 💾 Backup Database
        run: |
          echo "Creating database backup..."
          mkdir -p ./backups
          BACKUP_FILE="./backups/db_backup_$(date +%Y%m%d_%H%M%S).sql"
          
          # Source environment variables
          if [ -f .env ]; then
            export $(cat .env | grep -v '^#' | xargs)
          fi
          
          # Backup only if containers are running
          if docker compose ps | grep -q "Up"; then
            docker compose exec -T db mysqldump -u root -p"${MYSQL_ROOT_PASSWORD}" wordpress > "$BACKUP_FILE" 2>/dev/null || echo "⚠️  Database backup skipped (containers not running or first deploy)"
            
            if [ -f "$BACKUP_FILE" ]; then
              echo "✅ Backup saved: $BACKUP_FILE"
              # Keep only last 10 backups
              ls -t ./backups/db_backup_*.sql 2>/dev/null | tail -n +11 | xargs -r rm
            fi
          else
            echo "⚠️  Skipping backup - containers not running (first deploy?)"
          fi
      
      - name: 🔧 Update Configuration
        run: |
          echo "Checking configuration files..."
          
          # Ensure .env exists (don't overwrite if exists)
          if [ ! -f .env ]; then
            if [ -f .env.example ]; then
              echo "⚠️  .env not found, copying from .env.example"
              cp .env.example .env
              echo "⚠️  WARNING: Using default credentials from .env.example"
              echo "⚠️  For production, update .env with secure credentials!"
              echo ""
              echo "To update credentials on production server:"
              echo "  1. SSH into the server"
              echo "  2. Edit the .env file in the project directory"
              echo "  3. Run: docker compose down && docker compose up -d"
            else
              echo "❌ ERROR: Neither .env nor .env.example found!"
              exit 1
            fi
          fi
          
          echo "✅ Configuration ready"
      
      - name: 🐳 Deploy Docker Containers
        run: |
          echo "Deploying containers..."
          
          # Stop existing containers
          docker compose down || true
          
          # Pull latest images (only if newer versions available)
          docker compose pull --quiet
          
          # Start containers with proper user mapping
          docker compose up -d
          
          # Wait a moment for containers to start
          sleep 5
          
          # Show container status
          echo "Container status:"
          docker compose ps
          
          # Show container logs (last 20 lines)
          echo ""
          echo "WordPress container logs:"
          docker compose logs --tail=20 wordpress
          
          echo "✅ Containers deployed"
      
      - name: 🏥 Health Check
        run: |
          echo "Running health checks..."
          sleep 10  # Wait for services to start
          
          # Check WordPress
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7000 || echo "000")
            
            # Accept 200, 301, 302 (all valid responses)
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "✅ WordPress is responding (HTTP $HTTP_CODE)"
              
              # Show actual response for debugging
              echo ""
              echo "WordPress response headers:"
              curl -sI http://localhost:7000 | head -n 10
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            echo "⏳ Waiting for WordPress... attempt $ATTEMPT/$MAX_ATTEMPTS (HTTP: $HTTP_CODE)"
            sleep 2
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ WordPress health check failed!"
            echo ""
            echo "Container status:"
            docker compose ps
            echo ""
            echo "WordPress logs:"
            docker compose logs --tail=50 wordpress
            echo ""
            echo "Database logs:"
            docker compose logs --tail=20 db
            exit 1
          fi
            sleep 2
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ WordPress health check failed!"
            docker compose logs wordpress
            exit 1
          fi
          
          # Check phpMyAdmin
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ phpMyAdmin is responding"
          else
            echo "⚠️  phpMyAdmin not responding (non-critical)"
          fi
          
          # Check container status
          if docker compose ps | grep -q "Exit"; then
            echo "❌ Some containers exited!"
            docker compose ps
            docker compose logs
            exit 1
          fi
          
          echo "✅ All health checks passed"
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          # Remove old Docker images
          docker image prune -f --filter "until=24h" || true
          
          # Show final status
          echo "Final container status:"
          docker compose ps
      
      - name: 📊 Deployment Summary
        if: success()
        run: |
          echo "================================"
          echo "✅ DEPLOYMENT SUCCESSFUL"
          echo "================================"
          echo "🌐 WordPress: http://localhost:7000"
          echo "🗄️  phpMyAdmin: http://localhost:8080"
          echo "📅 Deployed at: $(date)"
          echo "🔖 Commit: ${{ github.sha }}"
          echo "================================"
      
      - name: 🔴 Rollback on Failure
        if: failure()
        run: |
          echo "================================"
          echo "❌ DEPLOYMENT FAILED - ROLLING BACK"
          echo "================================"
          
          # Try to restore from latest backup
          LATEST_BACKUP=$(ls -t ./backups/db_backup_*.sql 2>/dev/null | head -n 1)
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "📥 Restoring database from: $LATEST_BACKUP"
            
            # Source environment variables
            if [ -f .env ]; then
              export $(cat .env | grep -v '^#' | xargs)
            fi
            
            # Restore database
            docker compose exec -T db mysql -u root -p"${MYSQL_ROOT_PASSWORD}" wordpress < "$LATEST_BACKUP" || echo "⚠️  Database restore failed"
          fi
          
          # Restart containers
          docker compose down
          docker compose up -d
          
          echo "🔴 Please check logs for error details"
          docker compose logs --tail=50